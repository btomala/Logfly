/* 
 * Copyright Gil THOMAS
 * This file forms an integral part of Logfly project
 * See the LICENSE file distributed with source code
 * for details of Logfly licence project
 */
package littlewins;

import dialogues.alertbox;
import java.io.File;
import java.io.FileWriter;
import java.util.Map;
import java.util.logging.Level;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import org.xnap.commons.i18n.I18n;
import org.xnap.commons.i18n.I18nFactory;
import settings.configProg;
import systemio.mylogging;

/**
 *
 * @author gil
 * 
 * Display the logfile generated by mylogging class
 * The user can sent it to support
 * 
 */
public class winLog {
    private String logTxt;
    private configProg myConfig;
    private I18n i18n; 
    private String fileName;

    TextArea txtLog;
    
    public winLog(configProg currConfig, int pAction) {
        myConfig = currConfig;
        i18n = myConfig.getI18n();   
        switch (pAction) {
            case 0:
                readLogFile();
                fileName = "currlog.txt";
                break;
            case 1:
                reportSystem();
                fileName = "currsystem.txt";
                break;
        }
        showText();
    }
    
    private void reportSystem() {
        StringBuilder sbReport = new StringBuilder();
        for (Map.Entry<?,?> e : System.getProperties().entrySet()) {
            sbReport.append(String.format("%s = %s", e.getKey(), e.getValue())).append("\r\n");            
        }   
        logTxt = sbReport.toString();
    }
       
    private void readLogFile() {
        logTxt = systemio.mylogging.readLogFile();
    }
       
    private void showText() {
        
        Stage subStage = new Stage();
        
        final VBox vbox = new VBox();
        vbox.setPadding(new Insets(10));
        vbox.setSpacing(5);
        
        txtLog = new TextArea();
        txtLog.setWrapText(true);
        txtLog.setText(logTxt);
        txtLog.setEditable(false);
        // for buttons
        HBox buttonBar = new HBox();
        buttonBar.setPadding(new Insets(6));
        buttonBar.setSpacing(5);
        buttonBar.setAlignment(Pos.CENTER_RIGHT);
        Button btSend = new Button(i18n.tr("Send"));
        btSend.setOnAction((event) -> {
            sendLogFile();
            subStage.close();
        });
        Button btClose = new Button(i18n.tr("Close"));
        btClose.setOnAction((event) -> {            
            subStage.close();
        });
        buttonBar.getChildren().addAll(btSend, btClose);
        
        vbox.getChildren().addAll(txtLog, buttonBar);
        
        StackPane subRoot = new StackPane();
        subRoot.getChildren().add(vbox);
        
        Scene secondScene = new Scene(subRoot, 500, 250);
        // modal mode
        subStage.initModality(Modality.APPLICATION_MODAL);        
        subStage.setScene(secondScene);     
        subStage.showAndWait();
    }
    
    private void sendLogFile() {
        try {
            File tempLog = systemio.tempacess.getAppFile("Logfly", fileName);
            FileWriter fileWriter = new FileWriter(tempLog);
            fileWriter.write(logTxt);
            fileWriter.close();
            winMail showMail = new winMail(myConfig,tempLog.getAbsolutePath(), true);  
        } catch (Exception e) {
            alertbox aError = new alertbox(myConfig.getLocale());
            aError.alertInfo(i18n.tr("Message could not be sent")); 
            StringBuilder sbError = new StringBuilder(this.getClass().getName()+"."+Thread.currentThread().getStackTrace()[1].getMethodName());
            sbError.append("\r\n").append(e.toString());
            mylogging.log(Level.SEVERE, sbError.toString());         
        }
    }
}
