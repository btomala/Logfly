<!DOCTYPE html>
<html>
<head>
    <title>Leaflet</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css" />
    <script src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js"></script>

    <script src="https://code.highcharts.com/4.2.2/highcharts.js"></script>
    <script type="text/javascript" src="http://www.google.com/jsapi"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBjulTHPOBLYvqnnm6FS8YAVJtqvJkG2A"></script>

    <script src="http://www.logfly.org/download/gmap/leaflet-google.js"></script>

    <script type="text/javascript" src="http://www.logfly.org/download/gmap/leaflet.draw.js"></script>
    <link rel="stylesheet" href="http://www.logfly.org/download/gmap/leaflet.draw.css" />

    <script type="text/javascript" src="http://www.logfly.org/download/gmap/leaflet.measurecontrol.js"></script>
    <link rel="stylesheet" href="http://www.logfly.org/download/gmap/leaflet.measurecontrol.css" />

    <link rel="stylesheet" href="http://www.logfly.org/download/gmap/leaflet.label.css" />
    <script src="http://www.logfly.org/download/gmap/leaflet.label.js"></script>

    <script src="http://www.logfly.org/download/gmap/leaflet.awesome-markers.js"></script>
    <link rel="stylesheet" href="http://www.logfly.org/download/gmap/leaflet.awesome-markers.css">

    <link rel="stylesheet" href="http://www.logfly.org/download/gmap/easy-button.css">
    <script src="http://www.logfly.org/download/gmap/easy-button.js"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

    <script src="http://rawgit.com/albburtsev/Leaflet.geojsonCSS/master/leaflet.geojsoncss.min.js"></script>

    <script type="text/javascript" src="http://www.logfly.org/download/gmap/jquery.fancybox.js?v=2.1.5"></script>
    <link rel="stylesheet" type="text/css" href="http://www.logfly.org/download/gmap/jquery.fancybox.css?v=2.1.5" media="screen" />   

    <style>
        html, body {
            height:100%;
            width:100%;
            padding:0px;
            margin:0px;
        }
        #carte { height: 75% }
        #graphe { height: 25% }
        .leaflet-google-layer{
            z-index: 0 !important;
        }
        .leaflet-map-pane{
            z-index: 100;
        }
        .info {
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
        }
        .info h4 {
            margin: 0 0 5px;
            color: #777;
        }
        .legend {
            padding: 6px 8px;
            font: 12px/14px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
        }
        table{
            border:1px solid black;
            border-collapse: collapse;
        }
        th, td{
            border:1px solid black;
            padding: 2px;
            font-weight: bolder;
        }
        tr:nth-child(even) {background: #CCC}
        tr:nth-child(odd) {background: #FFF}
        td:nth-child(2) { text-align: right; } 
        caption { 
            font-weight: bold;
            font-size: 1.4em;
        }
        .awesome-marker i {
            font-size: 20px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
<div id="carte"></div>
<div id="graphe"></div>

<script type='text/javascript'>

    var map = null;
    var mousemarker = null;
    var LayerBal = new L.LayerGroup();

    var tabPoints = [];
%tabPoints%

    var altiLg = [%altiLg%];

    var altiVal = [%altiVal%];

    var Vario = [%Vario%];

    var Speed = [%Speed%];

    //%Photos%

    //%Gallery%

    var Heure = [%Heure%];

    //%zoneReg%

    //%badPoints%

    function GrillePos(i) {
        if (mousemarker != null) {
            map.removeLayer(mousemarker);
            mousemarker = null;
        }
        mousemarker = new L.marker(tabPoints[i]).addTo(map);
        map.panTo(tabPoints[i]);
        info.update(altiLg[i]+'<br/>Alt : '+altiVal[i]+'m<br/>Vz : '+Vario[i]+'m/s<br/>Vit : '+Speed[i]+' km/h');
    }

    function popup(feature, layer) {
        if (feature.properties) {
            layer.bindPopup('<b>Class : '+feature.properties.Class+'</b><BR/>'+feature.properties.Name+'<BR/>Floor : '+feature.properties.Floor+'<BR/>Ceiling : '+feature.properties.Ceiling);
        }
    }

    // Efface la légende
    function hideLegend() {
        legend.getContainer().innerHTML='';   
    }

    // Affiche la légende
    function fillLegend() {
        legend._div.innerHTML = '';
        %legende%        
    };

    // Démarre la mesure
    function startMeasure() {
        document.getElementById('measure').click();
    }

    //%ScoreBalises%

    map = new L.Map('carte');

    var osmlayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'});
    var OpenTopoMap = L.tileLayer('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
        maxZoom: 16,
        attribution: 'Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
    });
    var mtklayer = L.tileLayer('http://tile2.maptoolkit.net/terrain/{z}/{x}/{y}.png');
    var fouryoulayer = L.tileLayer('http://4umaps.eu/{z}/{x}/{y}.png');
    var outdoorlayer = L.tileLayer('https://{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey=6f5667c1f2d24e5f84ec732c1dbd032e', {
        maxZoom: 18,
        attribution: '&copy; <a href="https://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        });

    var googleLayer = new L.Google('TERRAIN');
    var googleSat = new L.Google('SATELLITE');

    %layer%

    var baseMaps = {
        "OSM": osmlayer,
        "OpenTopo" : OpenTopoMap,
        "MTK" : mtklayer,
        "4UMaps" : fouryoulayer,
        "Outdoor" : outdoorlayer,
        "Google Terrain" : googleLayer,
        "Google Sat" : googleSat
    };

    var openaip_cached_basemap = new L.TileLayer("http://{s}.tile.maps.openaip.net/geowebcache/service/tms/1.0.0/openaip_basemap@EPSG%3A900913@png/{z}/{x}/{y}.png", {
                maxZoom: 14,
                minZoom: 4,
                tms: true,
                detectRetina: true,
                subdomains: '12',
                format: 'image/png',
                transparent: true
            });

    var hillslayer = new L.TileLayer("http://{s}.tiles.wmflabs.org/hillshading/{z}/{x}/{y}.png", {
                maxZoom: 17,
                attribution: 'Hillshading: SRTM3 v2 (<a href="https://www2.jpl.nasa.gov/srtm/">NASA</a>)'
            });     


    var THmarkers = new L.LayerGroup();
    var thermOptions = {
        color: 'yellow',
        weight: 6,
        opacity: 0.50
    };

//%THmarker%

    var GLmarkers = new L.LayerGroup();

//%GLmarker%

    var ScoreMarkers = new L.LayerGroup();

    //%ScoreLines%

    // Couche trace
    var trackOptions = {
        color: 'red',
        weight: 3,
        opacity: 0.85
    };

    var info = L.control({position: 'bottomright'});

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
        this.update();
        return this._div;
    };

    // method that we will use to update the control based on feature properties passed
    info.update = function (paramVol) {
        this._div.innerHTML = paramVol;
    };

    info.addTo(map);

    info.update('');

    var track = new L.Polyline(tabPoints, trackOptions);

    //%Aff_Photos%

    //%Aff_Zones%

    var geojsonMarkerOptions = {
        radius: 3,
        fillColor: "#ff7800",
        color: "#000",
        weight: 1,
        opacity: 1,
        fillOpacity: 0.8
    };

    //%Aff_BadPoints%

    var Affichage = {
%DisplayMenu%        
        //%ScoreOptions%
        //%CheckOption%
        //%PhotosOption%
    };

    L.control.layers(baseMaps,Affichage).addTo(map);

    map.addLayer(track);
    //%AddScoreMarkers%

    L.Control.measureControl().addTo(map);

    var StartIcon = new L.Icon({
        iconUrl: 'http://www.logfly.org/download/gmap/windsock.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/images/marker-shadow.png',
        iconSize: [32, 32],
        iconAnchor: [0, 32],
        popupAnchor: [1, -34],
        shadowSize: [25, 25]
    });

    L.marker(tabPoints[0],{icon: StartIcon}).addTo(map);

    var EndIcon = new L.Icon({
        iconUrl: 'http://www.logfly.org/download/gmap/Arrivee.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/images/marker-shadow.png',
        iconSize: [32, 32],
        iconAnchor: [8, 32],
        popupAnchor: [1, -34],
        shadowSize: [25, 25]
    });

    L.marker(tabPoints[tabPoints.length-1],{icon: EndIcon}).addTo(map);

    $(function () {

        $('#graphe').highcharts({

            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            plotOptions: {
                series: {
                    marker: {
                        // Sinon le point est dessiné pour les petites séries
                        enabled: false
                    },
                    point: {
                        events: {
                            mouseOver: function () {
                                if (mousemarker == null) {
                                    // Le x correspond à l'index, ça tombe bien...
                                    // Sinon on avait un obscur this.series.data.indexOf( this.point ) qui ne fonctionnait pas
                                    // mousemarker = new L.marker(tabPoints[this.x], {icon: IconPara}).addTo(map);
                                    //  mousemarker = new L.marker(tabPoints[this.x]).addTo(map);
                                    mousemarker = new L.marker(tabPoints[this.x],{icon: L.AwesomeMarkers.icon({icon: 'fa-star-o', markerColor: 'orange', prefix: 'fa', iconColor: 'white'}) }).addTo(map);
                                }
                                else {
                                    mousemarker.setLatLng(tabPoints[this.x]);
                                }
                                info.update(Heure[this.x]+'<br/>Alt : '+altiVal[this.x]+'m<br/>Vz : '+Vario[this.x]+'m/s<br/>Vit : '+Speed[this.x]+' km/h');
                            },
                            click: function () {
                                // On peut préciser un niveau de zoom
                                // On peut utiliser map.setView
                                map.panTo(tabPoints[this.x]);
                            }
                        }
                    },
                    events: {
                        mouseOut: function () {
                            if (mousemarker != null) {
                                map.removeLayer(mousemarker);
                                mousemarker = null;
                            }
                            info.update('');
                        }
                    }
                }
            },

            tooltip: {
                enabled: false
            },

            xAxis: {
                categories: altiLg
            },

            yAxis: {
                title: {
                    text: 'Altitude'
                },
                labels: {
                    format: '{value} m'
                }
            },

            series: [{
                showInLegend: false,
                data: altiVal
            }]
        });
    });

    var toggle = L.easyButton({
        states: [{
            stateName: 'remove-infos',
            icon: 'fa-user-times',
            title: 'remove infos',
            onClick: function(control) {
                hideLegend();
                control.state('add-infos');
            }
        }, {
            icon: 'fa-user-plus',
            stateName: 'add-infos',
            onClick: function(control) {
                fillLegend();
                control.state('remove-infos');
            },
            title: 'remove infos'
        }]
    });

    toggle.addTo(map);

    //%btnGallery%

    var legend = L.control({position: 'topleft'});

    legend.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'legend');
        fillLegend();
        return this._div;
    };

    legend.addTo(map);

    setTimeout(function(){ map.fitBounds(track.getBounds()); }, 2000);
</script>
</body>
</html>
